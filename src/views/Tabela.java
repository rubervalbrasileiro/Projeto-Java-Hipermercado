/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package views;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import javax.swing.JOptionPane;
import models.Produto;
import modelDAO.ProdutoDAO;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import java.util.ArrayList;
import java.util.List;
import java.sql.SQLException;

/**
 *
 * @author AQUI TEM
 */
public class Tabela extends javax.swing.JFrame {

    /**
     * Creates new form Tabela
     */
    public Tabela() {
        initComponents();
        setLocationRelativeTo(null);
        DefaultTableModel modelo = (DefaultTableModel) tblTabela.getModel();
        carregarDados();
        tblTabela.setRowSorter(new TableRowSorter(modelo));
    }

    public void carregarDados() {
        ProdutoDAO produtoDAO = new ProdutoDAO();
        DefaultTableModel tabela = (DefaultTableModel) tblTabela.getModel();

        // Limpa os dados atuais da tabela
        tabela.setRowCount(0);

        for (Produto p : produtoDAO.listaProdutos()) {
            Object[] dados = {p.getId(), p.getProduto(), p.getQtd(), p.getPreco(), p.getTotal()};
            tabela.addRow(dados);
            Double quantidade;
            Double preco;

            try {

                quantidade = (double) p.getQtd();  // Assumindo que pode lançar a exceção
            } catch (NumberFormatException e) {
                quantidade = 0.0;  // Define um valor padrão
            }

            try {
                preco = p.getPreco();  // Assumindo que pode lançar a exceção
            } catch (NumberFormatException e) {
                preco = 0.0;  // Define um valor padrão
            }

        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblFiltro = new javax.swing.JLabel();
        txtFiltro = new javax.swing.JTextField();
        lblDescricao = new javax.swing.JLabel();
        txtDescricao = new javax.swing.JTextField();
        lblQtd = new javax.swing.JLabel();
        txtQtd = new javax.swing.JTextField();
        lblPreco = new javax.swing.JLabel();
        txtPreco = new javax.swing.JTextField();
        lblTotal = new javax.swing.JLabel();
        txtTotal = new javax.swing.JTextField();
        btnCadastrar = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();
        btnAtualizar = new javax.swing.JButton();
        btnLimpar = new javax.swing.JButton();
        btnFiltro = new javax.swing.JButton();
        btnImprimir = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTabela = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Dados do Produtos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(255, 255, 51))); // NOI18N

        lblFiltro.setText("Filtro");

        txtFiltro.setToolTipText("Digite um Produto para Filtrar");
        txtFiltro.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        txtFiltro.setNextFocusableComponent(txtQtd);
        txtFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFiltroActionPerformed(evt);
            }
        });
        txtFiltro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtFiltroKeyPressed(evt);
            }
        });

        lblDescricao.setText("Descrição");

        txtDescricao.setToolTipText("Digite um Produto");
        txtDescricao.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        txtDescricao.setNextFocusableComponent(txtQtd);
        txtDescricao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDescricaoActionPerformed(evt);
            }
        });
        txtDescricao.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDescricaoKeyPressed(evt);
            }
        });

        lblQtd.setText("Quantidade");

        txtQtd.setToolTipText("Informe a Quantidade");
        txtQtd.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        txtQtd.setNextFocusableComponent(txtPreco);
        txtQtd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtQtdActionPerformed(evt);
            }
        });
        txtQtd.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtQtdKeyPressed(evt);
            }
        });

        lblPreco.setText("Preço");

        txtPreco.setToolTipText("Digite o Preço");
        txtPreco.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        txtPreco.setNextFocusableComponent(btnCadastrar);
        txtPreco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPrecoActionPerformed(evt);
            }
        });
        txtPreco.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPrecoKeyPressed(evt);
            }
        });

        lblTotal.setText("Total");

        txtTotal.setToolTipText("Valor Total");
        txtTotal.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        txtTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTotalActionPerformed(evt);
            }
        });
        txtTotal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtTotalKeyPressed(evt);
            }
        });

        btnCadastrar.setBackground(new java.awt.Color(0, 255, 51));
        btnCadastrar.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        btnCadastrar.setText("Cadastrar");
        btnCadastrar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCadastrar.setNextFocusableComponent(btnAtualizar);
        btnCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarActionPerformed(evt);
            }
        });
        btnCadastrar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnCadastrarKeyPressed(evt);
            }
        });

        btnExcluir.setBackground(new java.awt.Color(255, 51, 0));
        btnExcluir.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        btnExcluir.setText("Excluir");
        btnExcluir.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnExcluir.setNextFocusableComponent(txtDescricao);
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        btnAtualizar.setBackground(new java.awt.Color(102, 204, 255));
        btnAtualizar.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        btnAtualizar.setText("Atualizar");
        btnAtualizar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAtualizar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAtualizarMouseClicked(evt);
            }
        });
        btnAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarActionPerformed(evt);
            }
        });
        btnAtualizar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnAtualizarKeyPressed(evt);
            }
        });

        btnLimpar.setBackground(new java.awt.Color(204, 102, 255));
        btnLimpar.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        btnLimpar.setText("Limpar");
        btnLimpar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnLimpar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnLimparMouseClicked(evt);
            }
        });
        btnLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparActionPerformed(evt);
            }
        });
        btnLimpar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnLimparKeyPressed(evt);
            }
        });

        btnFiltro.setBackground(new java.awt.Color(153, 153, 0));
        btnFiltro.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        btnFiltro.setText("Filtro");
        btnFiltro.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnFiltro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnFiltroMouseClicked(evt);
            }
        });
        btnFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFiltroActionPerformed(evt);
            }
        });
        btnFiltro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnFiltroKeyPressed(evt);
            }
        });

        btnImprimir.setBackground(new java.awt.Color(255, 153, 0));
        btnImprimir.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        btnImprimir.setText("Imprimir");
        btnImprimir.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnImprimir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnImprimirMouseClicked(evt);
            }
        });
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });
        btnImprimir.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnImprimirKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(lblDescricao)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblQtd)
                        .addGap(10, 10, 10))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 10, Short.MAX_VALUE)
                        .addComponent(txtDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                        .addComponent(txtQtd, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addComponent(lblPreco)
                        .addGap(91, 91, 91)
                        .addComponent(lblTotal))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(txtPreco, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(55, 55, 55)
                        .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(24, 24, 24))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblFiltro)
                            .addComponent(txtFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(btnCadastrar)
                        .addGap(18, 18, 18)
                        .addComponent(btnExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnAtualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnLimpar, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(lblFiltro)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(txtFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDescricao)
                    .addComponent(lblQtd)
                    .addComponent(lblPreco)
                    .addComponent(lblTotal))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPreco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtQtd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCadastrar)
                    .addComponent(btnExcluir)
                    .addComponent(btnAtualizar)
                    .addComponent(btnLimpar)
                    .addComponent(btnFiltro)
                    .addComponent(btnImprimir))
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tabela", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(255, 255, 51))); // NOI18N

        tblTabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "produto", "quantidade", "preco", "total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblTabela.setToolTipText("Informações da Tabela");
        tblTabela.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tblTabela.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblTabelaMouseClicked(evt);
            }
        });
        tblTabela.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblTabelaKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tblTabela);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtPrecoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPrecoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPrecoActionPerformed

    private void txtTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTotalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTotalActionPerformed

    private void txtQtdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtQtdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtQtdActionPerformed

    private void txtDescricaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDescricaoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDescricaoActionPerformed

    private void btnAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarActionPerformed
        // TODO add your handling code here: Atuliza um produto em seu campos. 
        try {
            if (tblTabela.getSelectedRow() != -1) {
                ProdutoDAO produtoDAO = new ProdutoDAO();
                // Produto p = new Produto();

                // Obtém o ID do produto da primeira coluna da linha selecionada
                int id = Integer.parseInt(tblTabela.getValueAt(tblTabela.getSelectedRow(), 0).toString());

                // Captura os dados dos campo
                String produto = txtDescricao.getText(); // Nome do produto
                int qtd = Integer.parseInt(txtQtd.getText()); // Quantidade
                double preco = Double.parseDouble(txtPreco.getText()); // Preço unitário
                double total = Double.parseDouble(txtTotal.getText()); // Total

                // Chama o método atualizar, passando os valores capturados
                produtoDAO.atualizar(id, produto, qtd, preco, total);

                // Exibe mensagem de confirmação e limpa os campos após atualizar
                //JOptionPane.showMessageDialog(this, "Produto atualizado com sucesso!");
                limparCampos();
                carregarDados(); // Atualiza a tabela com os novos dados

            } else {
                JOptionPane.showMessageDialog(this, "Selecione um produto na tabela para atualizar.", "Erro", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Erro ao atualizar: Verifique os campos numéricos!", "Erro", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao atualizar o produto: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnAtualizarActionPerformed

    private void btnCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarActionPerformed
        // TODO add your handling code here:
        Produto p = new Produto();
        ProdutoDAO produtoDAO = new ProdutoDAO();

        // Verifique se os campos não estão vazios antes de converter
        if (txtDescricao.getText().isEmpty() || txtQtd.getText().isEmpty() || txtPreco.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Todos os campos devem ser preenchidos!");
            return;
        }

        // Substitui a vírgula por ponto no valor do preço
        String precoTexto = txtPreco.getText().replace(",", ".");

        // Verifica se o produto já existe no banco de dados
        if (produtoDAO.produtoExiste(txtDescricao.getText())) {
            JOptionPane.showMessageDialog(null, "Produto já cadastrado!");
            return;
        }
        try {

            // Preenche o objeto Produto com os dados dos campos de texto
            p.setProduto(txtDescricao.getText());
            p.setQtd(Integer.parseInt(txtQtd.getText()));
            p.setPreco(Double.parseDouble(txtPreco.getText()));

            // Total é calculado automaticamente
            p.setTotal(p.getQtd() * p.getPreco());

            // Insere o novo produto no banco de dados
            produtoDAO.criar(p.getProduto(), p.getQtd(), p.getPreco(), p.getTotal());

            limparCampos();
            txtDescricao.requestFocus();
            carregarDados();
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Erro ao converter número. Verifique os valores inseridos.");

        }

    }//GEN-LAST:event_btnCadastrarActionPerformed

    private void btnAtualizarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAtualizarMouseClicked
        // TODO add your handling code here:
        // Verifica se uma linha foi clicada
        if (tblTabela.getSelectedRow() != -1) {
            // Pega os valores da linha selecionada e preenche nos campos
            //txtId.setText(tblTabela.getValueAt(tblTabela.getSelectedRow(), 0).toString());
            txtDescricao.setText(tblTabela.getValueAt(tblTabela.getSelectedRow(), 1).toString());
            txtQtd.setText(tblTabela.getValueAt(tblTabela.getSelectedRow(), 2).toString());
            txtPreco.setText(tblTabela.getValueAt(tblTabela.getSelectedRow(), 3).toString());
            txtTotal.setText(tblTabela.getValueAt(tblTabela.getSelectedRow(), 4).toString());
        }
    }//GEN-LAST:event_btnAtualizarMouseClicked

    private void tblTabelaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblTabelaMouseClicked
        // TODO add your handling code here: // Pega os valores da linha selecionada e preenche nos campos
        if (tblTabela.getSelectedRow() != -1) {
            
            //txtId.setText(tblTabela.getValueAt(tblTabela.getSelectedRow(), 0).toString()); o id ocultado pois não tem 
            // no jframe
            txtDescricao.setText(tblTabela.getValueAt(tblTabela.getSelectedRow(), 1).toString());
            txtQtd.setText(tblTabela.getValueAt(tblTabela.getSelectedRow(), 2).toString());
            txtPreco.setText(tblTabela.getValueAt(tblTabela.getSelectedRow(), 3).toString());
            txtTotal.setText(tblTabela.getValueAt(tblTabela.getSelectedRow(), 4).toString());
        }
    }//GEN-LAST:event_tblTabelaMouseClicked

    private void tblTabelaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblTabelaKeyReleased
        // TODO add your handling code here: Responsável pela movimentação da troca de linha <-- --> seta
        if (tblTabela.getSelectedRow() != -1) {
            // Pega os valores da linha selecionada e preenche nos campos
            //txtId.setText(tblTabela.getValueAt(tblTabela.getSelectedRow(), 0).toString());
            txtDescricao.setText(tblTabela.getValueAt(tblTabela.getSelectedRow(), 1).toString());
            txtQtd.setText(tblTabela.getValueAt(tblTabela.getSelectedRow(), 2).toString());
            txtPreco.setText(tblTabela.getValueAt(tblTabela.getSelectedRow(), 3).toString());
            txtTotal.setText(tblTabela.getValueAt(tblTabela.getSelectedRow(), 4).toString());
        }
    }//GEN-LAST:event_tblTabelaKeyReleased

    private void btnCadastrarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnCadastrarKeyPressed
        // TODO add your handling code here:
        // Verifica se a tecla pressionada foi o Enter
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            // Chama a ação do botão cadastrar
            Produto p = new Produto();
            ProdutoDAO produtoDAO = new ProdutoDAO();

            // Verifique se os campos não estão vazios antes de converter
            if (txtDescricao.getText().isEmpty() || txtQtd.getText().isEmpty() || txtPreco.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Todos os campos devem ser preenchidos!");
                return;
            }

            // Substitui a vírgula por ponto no valor do preço
            String precoTexto = txtPreco.getText().replace(",", ".");
            try {
                // Verifica se o produto já existe no banco de dados
                if (produtoDAO.produtoExiste(txtDescricao.getText())) {
                    JOptionPane.showMessageDialog(null, "Produto já cadastrado!");
                    return;
                }
                // Preenche o objeto Produto com os dados dos campos de texto
                p.setProduto(txtDescricao.getText());
                p.setQtd(Integer.parseInt(txtQtd.getText()));
                p.setPreco(Double.parseDouble(txtPreco.getText()));

                // Total é calculado automaticamente
                p.setTotal(p.getQtd() * p.getPreco());

                // Insere o novo produto no banco de dados
                produtoDAO.criar(p.getProduto(), p.getQtd(), p.getPreco(), p.getTotal());

                limparCampos();
                txtDescricao.requestFocus();
                carregarDados();
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Erro ao converter número. Verifique os valores inseridos.");

            }

            txtDescricao.requestFocus();
        }
    }//GEN-LAST:event_btnCadastrarKeyPressed

    private void btnAtualizarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnAtualizarKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
             try {
            if (tblTabela.getSelectedRow() != -1) {
                ProdutoDAO produtoDAO = new ProdutoDAO();
                // Produto p = new Produto();

                // Obtém o ID do produto da primeira coluna da linha selecionada
                int id = Integer.parseInt(tblTabela.getValueAt(tblTabela.getSelectedRow(), 0).toString());

                // Captura os dados dos campo
                String produto = txtDescricao.getText(); // Nome do produto
                int qtd = Integer.parseInt(txtQtd.getText()); // Quantidade
                double preco = Double.parseDouble(txtPreco.getText()); // Preço unitário
                double total = Double.parseDouble(txtTotal.getText()); // Total

                // Chama o método atualizar, passando os valores capturados
                produtoDAO.atualizar(id, produto, qtd, preco, total);

                // Exibe mensagem de confirmação e limpa os campos após atualizar
                //JOptionPane.showMessageDialog(this, "Produto atualizado com sucesso!");
                limparCampos();
                carregarDados(); // Atualiza a tabela com os novos dados

            } else {
                JOptionPane.showMessageDialog(this, "Selecione um produto na tabela para atualizar.", "Erro", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Erro ao atualizar: Verifique os campos numéricos!", "Erro", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao atualizar o produto: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
        }
        txtDescricao.requestFocus();
    }//GEN-LAST:event_btnAtualizarKeyPressed

    private void txtDescricaoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDescricaoKeyPressed
        // TODO add your handling code here: quando a tcl ENTER precionada avança para quantidade
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            txtQtd.requestFocus();
        }
    }//GEN-LAST:event_txtDescricaoKeyPressed

    private void txtQtdKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQtdKeyPressed
        // TODO add your handling code here: quando a tcl ENTER precionada avança para preo
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtPreco.requestFocus();
        }
    }//GEN-LAST:event_txtQtdKeyPressed

    private void txtPrecoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPrecoKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            //JOptionPane.showMessageDialog(null, "Você deseja cadastrar um produto\n Se for Atualizar basta selecionar na tabela ");
            btnCadastrar.requestFocus();
        }
    }//GEN-LAST:event_txtPrecoKeyPressed

    private void txtTotalKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTotalKeyPressed
        // TODO add your handling code here:quando a tcl ENTER precionada avança para btn atualizar
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            btnAtualizar.requestFocus();
        }
    }//GEN-LAST:event_txtTotalKeyPressed

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        // TODO add your handling code here:
        // Verifique se uma linha foi selecionada na tabela
        int selectedRow = tblTabela.getSelectedRow();

        if(selectedRow == -1){ // -1 significa que nenhuma linha está selecionada
            JOptionPane.showMessageDialog(null, "Por favor selecione uma linha para ser excluída!");
            return;
        }
        
        // Pergunta ao usuário se ele realmente deseja excluir o produto
        int confimacao = JOptionPane.showConfirmDialog(null, "Você deseja realmente excluir o produto selecionado?",
                "Confimação de Exclusão", JOptionPane.YES_NO_CANCEL_OPTION);
        
        // Se o usuário escolher "Não", cancelar a operação
        if(confimacao != JOptionPane.YES_OPTION) {
            JOptionPane.showMessageDialog(null, "Eclusão Cancelada!");
            return;
        }
               // Obtém o ID do produto da primeira coluna da linha selecionada
        int id = Integer.parseInt(tblTabela.getValueAt(tblTabela.getSelectedRow(), 0).toString());
         
                ProdutoDAO produtoDAO = new ProdutoDAO();
                produtoDAO.inativarProduto(id);
                carregarDados();
                limparCampos();
                txtDescricao.requestFocus();
               

    }//GEN-LAST:event_btnExcluirActionPerformed

    private void btnLimparMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLimparMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_btnLimparMouseClicked

    private void btnLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparActionPerformed
        // TODO add your handling code here:
        limparCampos();
        txtDescricao.requestFocus();
    }//GEN-LAST:event_btnLimparActionPerformed

    private void btnLimparKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnLimparKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnLimparKeyPressed

    private void btnFiltroMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnFiltroMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_btnFiltroMouseClicked
    //Metodo auxiliar
    private void exibirNaTabela(List<Produto> produtos) {
    DefaultTableModel modelo = (DefaultTableModel) tblTabela.getModel();
    modelo.setRowCount(0); // limpa a tabela

    for (Produto p : produtos) {
        modelo.addRow(new Object[]{
            p.getId(),
            p.getProduto(),
            p.getQtd(),
            p.getPreco(),
            p.getTotal()
        });
    }
}

    private void btnFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFiltroActionPerformed
        // TODO add your handling code here:
    String filtro = txtFiltro.getText().trim().toLowerCase();   
    
        
    String filtroProduto = txtFiltro.getText(); // Campo para filtrar produto
    String qtdTexto = txtQtd.getText(); // Campo para filtrar quantidade
    String precoTexto = txtPreco.getText(); // Campo para filtrar preço
    String totalTexto = txtTotal.getText(); // Campo para filtrar total
    
    Integer qtd = null;
    Double preco = null;
    Double total = null;

    ProdutoDAO produtoDao = new ProdutoDAO();
    List<Produto> todos = produtoDao.listaProdutos();
    
    // Filtrar por nome que contenha o texto digitado
    List<Produto> filtrados = new ArrayList<>();
    for (Produto p : todos) {
        if (p.getProduto().toLowerCase().contains(filtro)) {
            filtrados.add(p);
        }
    }

    if (filtrados.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Nenhum produto encontrado com esse filtro.");
    }

    exibirNaTabela(filtrados);  // método para atualizar a JTable
    
    // Tenta converter a quantidade, preço e total, se os campos não estiverem vazios
   /* try {
        if (!qtdTexto.isEmpty()) {
            qtd = Integer.parseInt(qtdTexto);
        }
        if (!precoTexto.isEmpty()) {
            preco = Double.parseDouble(precoTexto.replace(",", ".")); // Substitui vírgula por ponto, se necessário
        }
        if (!totalTexto.isEmpty()) {
            total = Double.parseDouble(totalTexto.replace(",", "."));
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Erro ao converter os números. Verifique os valores inseridos.");
        return;
    }

    // Verifica se o campo do produto está vazio ou se algum dos campos está preenchido para o filtro
    if (filtroProduto.isEmpty() && qtd == null && preco == null && total == null) {
        carregarDados(); // Se nenhum campo for preenchido, carrega todos os dados
    } else {
        try {
            // Chama o método de filtro, passando os valores para filtrar
            List<Produto> produtosFiltrados = produtoDao.filtro(filtroProduto, qtd, preco, total);
            //atualizarTabela(produtosFiltrados); // Atualiza a tabela com os produtos filtrados
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Erro ao filtrar produto: " + e.getMessage());
        }
    }
       */ 
    }//GEN-LAST:event_btnFiltroActionPerformed

    private void btnFiltroKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnFiltroKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnFiltroKeyPressed

    private void txtFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFiltroActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_txtFiltroActionPerformed

    private void txtFiltroKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFiltroKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFiltroKeyPressed

    private void btnImprimirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnImprimirMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_btnImprimirMouseClicked

    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed
        // TODO add your handling code here: relizar a impressão da tabela
        btnImprimir.addActionListener(new ActionListener() {
    @Override
    public void actionPerformed(ActionEvent e) {
        try {
            // Método para imprimir a tabela inteira
            boolean complete = tblTabela.print();
            if (complete) {
                JOptionPane.showMessageDialog(null, "Impressão concluída com sucesso!", "Imprimir", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "Impressão cancelada!", "Imprimir", JOptionPane.WARNING_MESSAGE);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
});

    }//GEN-LAST:event_btnImprimirActionPerformed

    private void btnImprimirKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnImprimirKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnImprimirKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Tabela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Tabela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Tabela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tabela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Tabela().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAtualizar;
    private javax.swing.JButton btnCadastrar;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnFiltro;
    private javax.swing.JButton btnImprimir;
    private javax.swing.JButton btnLimpar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDescricao;
    private javax.swing.JLabel lblFiltro;
    private javax.swing.JLabel lblPreco;
    private javax.swing.JLabel lblQtd;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JTable tblTabela;
    private javax.swing.JTextField txtDescricao;
    private javax.swing.JTextField txtFiltro;
    private javax.swing.JTextField txtPreco;
    private javax.swing.JTextField txtQtd;
    private javax.swing.JTextField txtTotal;
    // End of variables declaration//GEN-END:variables

    public void limparCampos() {
        txtDescricao.setText("");
        txtPreco.setText("");
        txtQtd.setText("");
        txtTotal.setText("");
        txtFiltro.setText("");
    }

}
